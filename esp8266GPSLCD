/*ESP8266 GPS with display*/
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <U8g2lib.h>
#include <TinyGPS++.h>
float GPS_lat,GPS_lng=0;

U8G2_SSD1327_MIDAS_128X128_F_HW_I2C u8g2( // note "F_HW" version gave best results
/* No Rotation*/U8G2_R0,
/* reset=/ U8X8_PIN_NONE,
/ clock=/ 25, // use NON-default I2C pins for NodeMCU-32S
/ data=*/ 26); // data pin
/*
   This sample sketch demonstrates the normal use of a TinyGPS++ (TinyGPSPlus) object.
   It requires the use of SoftwareSerial, and assumes that you have a
   4800-baud serial GPS device hooked up on pins 4(rx) and 3(tx).
*/
bool LCD = true;  //show LCD
static const int RXPin = 13, TXPin = 15;
static const uint32_t GPSBaud = 9600;

// The TinyGPS++ object
TinyGPSPlus gps;

// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);

void setup()
{
  Serial.begin(115200);
  ss.begin(GPSBaud);

  //u8g2.setBusClock(1000000); // seems to work reliably, and very fast

  Serial.println(F("DeviceExample.ino"));
  Serial.println(F("A simple demonstration of TinyGPS++ with an attached GPS module"));
  Serial.print(F("Testing TinyGPS++ library v. ")); Serial.println(TinyGPSPlus::libraryVersion());
  Serial.println(F("by Mikal Hart"));
  Serial.println();
    u8g2.begin();
}

void loop()
{
  // This sketch displays information every time a new sentence is correctly encoded.
  while (ss.available() > 0)
    if (gps.encode(ss.read())){
      displayInfo();
      Show();
    }
  if (millis() > 5000 && gps.charsProcessed() < 10)
  {
    Serial.println(F("No GPS detected: check wiring."));
    while(true);
  }
  //
}

void displayInfo()
{
  Serial.print(F("Location: ")); 
  if (gps.location.isValid())
  {
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(","));
    Serial.print(gps.location.lng(), 6);
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F("  Date/Time: "));
  if (gps.date.isValid())
  {
    Serial.print(gps.date.month());
    Serial.print(F("/"));
    Serial.print(gps.date.day());
    Serial.print(F("/"));
    Serial.print(gps.date.year());
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.print(F(" "));
  if (gps.time.isValid())
  {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(F(":"));
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(F(":"));
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());
    Serial.print(F("."));
    if (gps.time.centisecond() < 10) Serial.print(F("0"));
    Serial.print(gps.time.centisecond());
  }
  else
  {
    Serial.print(F("INVALID"));
  }

  Serial.println();
}
void Show(void){
  GPS_lat=gps.location.lat();
  GPS_lng=gps.location.lng();
  if (LCD==true){
  u8g2.setFont(u8g2_font_ncenB12_tr);
  u8g2.setFontDirection(0);
  u8g2.setCursor(0, 20);
  u8g2.print("Latitude:");
  u8g2.setCursor(0, 40);
  u8g2.print(GPS_lat,6);
  u8g2.setCursor(0, 60);
  u8g2.print("Longitude:");
  u8g2.setCursor(0, 80);
  u8g2.print(GPS_lng,6);

  u8g2.sendBuffer();
  u8g2.clearBuffer();
  delay(1000);  
}}
